from django.shortcuts import render
from django.http import HttpResponse, JsonResponse
import requests
import json
from django.conf import settings
import os
import redis
from django.views.decorators.csrf import csrf_exempt
'''
REDIS STRUCTURE
user_id_1: {
	conversation_id_1: mockChatHistory1,
	conversation_id_2: mockChatHistory2,
}
user_id_2: {
	conversation_id_1: mockChatHistory3,
}
'''

mockChatHistory1 = {
	'conversation_id': 1,
	'history': [
		{
			'author': 'user',
			'name': 'Edward',
			'message': 'Hey there',
			'date': '2023-10-01T12:00:00Z'
		},
		{
			'author': 'bot',
			'name': 'KnowledgeAgent',
			'message': 'Hi sir, How can I help?',
			'date': '2023-10-01T12:00:00Z'
		},
		{
			'author': 'user',
			'name': 'Edward',
			'message': 'I have a question. What is the result of 2 + 2?',
			'date': '2023-10-01T12:00:00Z'
		},
		{
			'author': 'bot',
			'name': 'MathAgent',
			'message': 'The answer is: 4',
			'date': '2023-10-01T12:00:00Z'
		},
	]
}
mockChatHistory2 = {
	'conversation_id': 2,
	'history': [
		{
			'author': 'user',
			'name': 'Edward',
			'message': 'Does anyone can help me?',
			'date': '2023-10-01T12:00:00Z'
		},
		{
			'author': 'bot',
			'name': 'KnowledgeAgent',
			'message': 'Yes sure, I can help!',
			'date': '2023-10-01T12:00:00Z'
		},
	]
}

mockChatHistory3 = {
	'conversation_id': 3,
	'history': [
		{
			'author': 'user',
			'name': 'Edward',
			'message': 'What is the distance between Rio de Janeiro and New York?',
			'date': '2023-10-01T12:00:00Z'
		},
		{
			'author': 'bot',
			'name': 'MathAgent',
			'message': 'It is around 4,800 kilometers.',
			'date': '2023-10-01T12:00:00Z'
		},
	]
}

conversations = {
	1: mockChatHistory1,
	2: mockChatHistory2,
	3: mockChatHistory3
}

redis_client = redis.Redis.from_url(settings.REDIS_URL)

def process_chat_message(message, user_id, conversation_id):
	output = {
		"status_code": 200,
		"status_message": "success",
		"message": f"Processed message: {message}",
		"user_id": user_id,
		"conversation_id": conversation_id,
		"response": "Here is the answer with personality.",
		"source_agent_response": "Text generated by the specialized agent.",
		"agent_workflow": [
			{ "agent": "RouterAgent", "decision": "KnowledgeAgent" },
			{ "agent": "KnowledgeAgent" }
		]
	}
	return output

# Create your views here.
def index(request):
	context = {}
	return render(request, 'index.html', context)

@csrf_exempt
def chat(request):
	if request.method == "POST":
		data = json.loads(request.body)
		message = data.get("message")
		user_id = data.get("user_id")
		conversation_id = data.get("conversation_id")

		# Process the chat message and get a response
		response = process_chat_message(message, user_id, conversation_id)

		return JsonResponse(response)

	return JsonResponse({"error": "Invalid request"}, status=400)

@csrf_exempt
def get_conversations(request, user_id):

	user_data = redis_client.get(str(user_id))
	if user_data:
		conversationsList = json.loads(user_data)
	else:
		conversationsList = {}
	conversationsList = conversations

	response = {
		"status_code": 200,
		"status_message": "success",
		"conversationsList": conversationsList
	}
	return JsonResponse(response)